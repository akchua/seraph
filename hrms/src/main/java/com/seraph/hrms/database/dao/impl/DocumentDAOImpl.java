package com.seraph.hrms.database.dao.impl;import org.apache.commons.lang3.StringUtils;import org.hibernate.criterion.Junction;import org.hibernate.criterion.MatchMode;import org.hibernate.criterion.Order;import org.hibernate.criterion.Restrictions;import org.hibernate.sql.JoinType;import org.springframework.stereotype.Repository;import com.seraph.hrms.database.dao.DocumentDAO;import com.seraph.hrms.database.entity.Document;import com.seraph.hrms.enums.DocumentType;import com.seraph.hrms.objects.ObjectList;/** * @author  Adrian Jasper K. Chua * @version 1.0 * @since   11 December 2017 */@Repositorypublic class DocumentDAOImpl		extends AbstractDAO<Document, Long> 		implements DocumentDAO {		@Override	public ObjectList<Document> findAllWithPagingByPersonnel(int pageNumber, int resultsPerPage, Long personnelId,			String searchKey) {		return findAllWithPagingAndOrderByPersonnel(pageNumber, resultsPerPage, personnelId, searchKey, null);	}	@Override	public ObjectList<Document> findAllWithPagingAndOrderByPersonnel(int pageNumber, int resultsPerPage, Long personnelId,			String searchKey, Order[] orders) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));				if(personnelId != null) {			conjunction.add(Restrictions.eq("personnel.id", personnelId));		}				if(StringUtils.isNotBlank(searchKey))		{			for(String s : searchKey.split("\\s+")) {				conjunction.add(Restrictions.disjunction()						.add(Restrictions.ilike("documentType", s, MatchMode.ANYWHERE)));			}		}				return findAllByCriterion(pageNumber, resultsPerPage, null, null, null, orders, conjunction);	}		@Override	public ObjectList<Document> findAllWithPagingAndOrderByDocumentType(int pageNumber, int resultsPerPage,			DocumentType documentType, String searchKey, Order[] orders) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));				if(documentType != null) {			conjunction.add(Restrictions.eq("documentType", documentType));		}				if(StringUtils.isNotBlank(searchKey))		{			for(String s : searchKey.split("\\s+")) {				conjunction.add(Restrictions.disjunction()						.add(Restrictions.ilike("perso.firstName", s, MatchMode.ANYWHERE))						.add(Restrictions.ilike("perso.lastName", s, MatchMode.ANYWHERE))						.add(Restrictions.ilike("perso.middleName", s, MatchMode.ANYWHERE)));			}		}				String[] associatedPaths = { "personnel" };		String[] aliasNames = { "perso" };		JoinType[] joinTypes = { JoinType.INNER_JOIN };				return findAllByCriterion(pageNumber, resultsPerPage, associatedPaths, aliasNames, joinTypes, orders, conjunction);	}	@Override	public Document findByPersonnelAndType(Long personnelId, DocumentType documentType) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));		conjunction.add(Restrictions.eq("personnel.id", personnelId));		conjunction.add(Restrictions.eq("documentType", documentType));				return findUniqueResult(null, null, null, conjunction);	}}
