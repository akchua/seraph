package com.seraph.hrms.database.dao.impl;import java.util.List;import org.apache.commons.lang3.StringUtils;import org.hibernate.criterion.Junction;import org.hibernate.criterion.MatchMode;import org.hibernate.criterion.Order;import org.hibernate.criterion.Restrictions;import org.springframework.stereotype.Repository;import com.seraph.hrms.database.dao.EmploymentDAO;import com.seraph.hrms.database.entity.Employment;import com.seraph.hrms.objects.ObjectList;/** * @author  Adrian Jasper K. Chua * @version 1.0 * @since   6 December 2017 */@Repositorypublic class EmploymentDAOImpl		extends AbstractDAO<Employment, Long> 		implements EmploymentDAO {		@Override	public ObjectList<Employment> findAllWithPaging(int pageNumber, int resultsPerPage, Long personnelId,			String searchKey) {		return findAllWithPagingAndOrder(pageNumber, resultsPerPage, personnelId, searchKey, null);	}	@Override	public ObjectList<Employment> findAllWithPagingAndOrder(int pageNumber, int resultsPerPage, Long personnelId,			String searchKey, Order[] orders) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));		conjunction.add(Restrictions.eq("personnel.id", personnelId));				if(StringUtils.isNotBlank(searchKey))		{			for(String s : searchKey.split("\\s+")) {				conjunction.add(Restrictions.disjunction()						.add(Restrictions.ilike("firstName", s, MatchMode.ANYWHERE))						.add(Restrictions.ilike("lastName", s, MatchMode.ANYWHERE)));			}		}				return findAllByCriterion(pageNumber, resultsPerPage, null, null, null, orders, conjunction);	}	@Override	public List<Employment> findAllByPersonnelWithOrder(Long personnelId, Order[] orders) {		final Junction conjunction = Restrictions.conjunction();		conjunction.add(Restrictions.eq("isValid", Boolean.TRUE));		conjunction.add(Restrictions.eq("personnel.id", personnelId));				return findAllByCriterionList(null, null, null, null, conjunction);	}}
